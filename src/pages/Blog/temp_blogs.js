


export default [
    {
        id: "02042022clean.architecture",
        title: "CÃ³mo aplicar clean architecture en react.",
        timeStamp: "02/04/2022",
        html: `
        <p class="c0"><span class="c2">02/04/2022</span></p><h1 class="c5" id="h.t4iulgn2dorr"><span class="c3">C&oacute;mo aplicar clean architecture en react.</span></h1><p class="c0"><span class="c1">Aplicar una clean architecture en nuestros proyectos es muy importante para tener proyectos modulados en funci&oacute;n de su tarea, nos ayuda a tener una mejor organizaci&oacute;n y a entender mejor el c&oacute;digo que escribimos.</span></p><p class="c0 c4"><span class="c1"></span></p>
        <p class="c0"><span class="c1">La idea de una clean architecture es separar la l&oacute;gica de las vistas, los servicios y la l&oacute;gica de negocio separadas, para lograr hacemos uso de inyecci&oacute;n de dependencias por medio de redux.</span></p><p class="c0"><span class="c1">&nbsp;</span></p><p class="c0"><span class="c1">Comenzamos creando un proyecto en react: npx create-react-app nombre-de-app</span></p><p class="c0 c4"><span class="c1"></span></p><p class="c0"><span class="c1">Creamos 3 carpetas: logic, views y services. Dentro de la carpeta de logic creamos otras tres para alojar la l&oacute;gica de redux: actions, reduces y middlewares. Y un archivo store.js que vamos a modificar luego.</span></p><p class="c0 c4"><span class="c1"></span></p><p class="c0"><span class="c1">Los middlewares se van a encargar de interactuar con la abstracci&oacute;n de los servicios y le vamos a inyectar.</span></p><p class="c0"><span>Las </span><span>actions</span><span class="c1">&nbsp;representan las acciones que van a alterar un estado global.</span></p><p class="c0"><span class="c1">Y los reducers es donde definimos como afecta cada acci&oacute;n al estado global que definimos.</span></p><p class="c0 c4"><span class="c1"></span></p><p class="c0"><span><img src="https://files.fm/thumb_show.php?i=kjsate68u"></span></p><p class="c0 c4"><span class="c1"></span></p><p class="c0"><span class="c1">Creamos dos acciones para el servicio de la api, una acci&oacute;n para extraer los datos y otra para guardarlos en el estado global.</span></p><p class="c0"><span><img src="https://files.fm/thumb_show.php?i=sggz5ybfv"></span></p><p class="c0"><span class="c1">En la carpeta de middlewares vamos a crear una carpeta para los middlewares del servicio de api y un archivo index.js en donde vamos a exportar todos los middlewares en una lista.</span></p><p class="c0"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 601.70px; height: 209.33px;"><img src="https://files.fm/thumb_show.php?i=srxhd39ay"></span></p><p class="c0"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 542.00px; height: 219.00px;"><img src="https://files.fm/thumb_show.php?i=2rxkmbzf8"></span></p><p class="c0"><span>Una ves terminado eso hacemos lo mismo con los </span><span>reducers</span><span class="c1">.</span></p><p class="c0"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 601.70px; height: 258.67px;"><img src="https://files.fm/thumb_show.php?i=nazpd6vmk"></span></p><p class="c0"><span>Pero en el index.js de la carpeta reducers los exportamos con la funci&oacute;n de redux </span><span>combineReducers</span><span class="c1">.</span></p><p class="c0"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 601.70px; height: 281.33px;"><img src="https://files.fm/thumb_show.php?i=2k3qqru32"></span></p><p class="c0"><span>En el archivo store vamos a crear una funci&oacute;n llamada </span><span>configureStore</span><span>&nbsp;que va a tomar de par&aacute;metro un objeto de servicios y llamamos a la funci&oacute;n </span><span>createStore</span><span class="c1">&nbsp;de redux a la que le pasamos los reducers y combinamos los middlewares pasandole a cada uno los servicios por medio de una funci&oacute;n map, de esta manera hacemos la inyecci&oacute;n de dependencias.</span></p><p class="c0"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 601.70px; height: 160.00px;"><img src="https://files.fm/thumb_show.php?i=cvfrvwhe6"></span></p><p class="c0 c4"><span class="c1"></span></p><p class="c0"><span>Envolvemos nuestra aplicaci&oacute;n de react en un Provider de react redux, le pasamos como prop de store nuestra funci&oacute;n de </span><span>configureStore</span><span class="c1">&nbsp;y le pasamos los servicios.</span></p><p class="c0"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 448.00px; height: 339.00px;"><img src="https://files.fm/thumb_show.php?i=86t7997xm"></span></p><p class="c0 c4"><span class="c1"></span></p><p class="c0"><span class="c1">Para los servicios es una abstracci&oacute;n que interact&uacute;a directamente con los servicios, vamos a crear una funci&oacute;n que extrae datos de una api, y esta funci&oacute;n la vamo a exportar en un objeto &ldquo;api&rdquo; y en servicios vamos a exportar un objeto con todos nuestros servicios.</span></p><p class="c0"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 601.70px; height: 121.33px;"><img src="https://files.fm/thumb_show.php?i=tbsur9vj3"></span></p><p class="c0"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 597.00px; height: 225.00px;"><img src="https://files.fm/thumb_show.php?i=bfx7e3ju8"></span></p><p class="c0 c4"><span class="c1"></span></p><p class="c0"><span>En nuestro App.js vamos a crear una funci&oacute;n que convierte el estado global en un prop del componente, para que el componente reciba este prop debemos usar la funci&oacute;n connect, despu&eacute;s hacemos usa de los hooks </span><span>useDispatch</span><span>&nbsp;y </span><span>useEffect</span><span class="c1">&nbsp;para hacer un dispatch y extraer los datos de la api apenas carga la p&aacute;gina.</span></p><p class="c0"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 541.00px; height: 552.00px;"><img src="https://files.fm/thumb_show.php?i=2ga6664n9"></span></p><p class="c0 c4"><span class="c1"></span></p><p class="c0 c4"><span class="c1"></span></p><p class="c0 c4"><span class="c1"></span></p>
        <iframe width="560" height="315" src="https://www.youtube.com/embed/YKMaDHgs4HQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        <iframe width="560" height="315" src="https://www.youtube.com/embed/NY1z1q3d6p8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        `,
        mainImage: "https://files.fm/thumb_show.php?i=tbsur9vj3"
    }
]